XSRF（Cross-Site Request Forgery, 跨站请求伪造）

风险
可能发生的情况
    攻击者能够使受害者执行被受害者授权的任何行为，例如将受害者账户中的存款转移到攻击者的账户中。这种行为将被记录为由受害者执行的。

起因
这样的情况是如何发生的
    应用程序完全基于HTTP请求内容来执行一些修改数据库内容的操作，并且不是对每一次请求都重新认证（例如事务认证或加密形式的token），而是依赖浏览器或者会话认证。这意味着攻击者能够使用社会工程以使受害者点击一个包含事务请求的链接，从而使应用程序信任攻击者的浏览器并且执行操作。这类攻击被称为“跨站请求伪造”（XSRF 或 CSRF）。

常规建议
如何避免这样的情况
    实现一个反CSRF机制的标准或库：最好是一个内置的、由平台提供的机制或OWASP的CSRFGuard。选择性的重新认证或事务认证，例如加密形式的token，也是可以接受的。

源代码示例
C#
HttpRequest的内容未经任何验证就被用于数据库查询。
public class XSRF
{
    public void foo(SqliteConnection connection, HttpRequest Request)
    {
        string input = Request.QueryString["user"];
        string sql = "insert into Comments(comment) values (@user)";
        MySqlCommand cmd = new MySqlCommand(sql, connection);
        cmd.Parameters.AddwithValue(@user, input);
        connection.Open();
        SqlDataReader reader = cmd.ExecuteReader();
    }
}

HttpRequest的内容使用AntiXsrfTokenKey验证
public class XSRFFixed
{
    public void foo(SqliteConnection connection, AntiXsrf AntiXsrfTokenKey, HttpRequest Request)
    {
        string input = AntiXsrfTokenKey.Validate(Request.QueryString["user"]);
        string sql = "insert into Comments(comment) values (@user)";
        MySqlCommand cmd = new MySqlCommand(sql, connection);
        cmd.Parameters.AddwithValue(@user, input);
        connection.Open();
        SqlDataReader reader = cmd.ExecuteReader();
    }
}


更多信息：http://cwe.mitre.org/data/definitions/352.html
