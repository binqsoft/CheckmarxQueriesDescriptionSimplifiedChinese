Code_Injection(代码注入) 

风险
可能发生的情况
    攻击者可以在这个应用程序服务器宿主机上运行任意代码。根据这个应用程序的操作系统权限，包括以下可能的情况：
        * 数据库访问，例如读取或者修改敏感数据；
        * 文件操作(读/创建/修改/删除)；
        * 改动这个网站；
        * 打开一个通向攻击者的服务器的网络连接；
        * 使用应用程序的加密秘钥来解密机密数据；
        * 启动和停止系统服务；
        * 完全接管服务器。


起因
这样的情况是如何发生的
    这个应用程序通过创建并运行包含有不能信任的数据的代码来执行一些行为，这些数据可能处于恶意用户的控制之下。如果这些数据包含有恶意代码，这被执行的代码可能包含有由攻击者密谋策划的系统级别的活动，当它被运行(被执行)时，就像攻击者直接在这个应用程序服务器上运行代码一样。


常规建议
如何避免这样的情况
    这个应用程序不应该编译、执行、或评估任何来自任何源自外部的不能信任的代码，包括用户输入、上传的文件、或者数据库。
    如果在动态执行中确实需要包含外部数据，将这个数据作为参数传递给这代码也是被容许的，但不要直接执行用户数据。
    如果需要将不能信任的数据传递给动态执行，强制执行非常严格的数据校验。例如，仅接受在某两个特定值之间的整数。
    校验所有输入，无论来源。校验应该基于一个白名单：仅接受符合特定结构的数据，而不是拒绝不合格的模式。参数应该被限制到一个被允许的字符集里，并且没有被校验的输入应该被丢弃。除了字符之外，检查如下内容：
        * 数据类型
        * 数据大小
        * 数据范围
        * 数据格式
        * 期待的一些值
    如果可能的话，永远优先采用已知的白名单和可以信任的输入而不是与一个黑名单比较。
    配置这个应用程序，让它使用一个受限制的人员账户来运行，这个账户没有任何不必要的特权。
    如果可能的话，隔离所有动态执行使它只用一个单独的、专用的人员账户，该账户只有对指定操作和被动态执行使用的文件的特权，依照最小特权原则。
    优先选择将用户数据传递给预执行的脚本，即就是，在另外一个被隔离的应用程序里。
    如果被提供的用户数据里仅包含Python字符串和字符串容器，考虑使用ast.literal_eval()，或者甚至是json对象。


源代码示例
Python
动态执行用户代码

@app.route('/execute')
def execute_user_code_unsafe():
    user_code = request.args.get('code')
    result = eval(user_code)
    return result['value']


安全地解析用户的字符串
@app.route('/exectue')
def execute_user_code_unsafe():
    user_code = request.args.get('code')
    result = ast.literal_eval(user_code)
    return result['value']

更多信息：http://cwe.mitre.org/data/definitions/94.html
