Command_Injection(命令注入) 

风险
可能发生的情况
    攻击者可以在这个应用程序服务器宿主机上运行任意系统级别的OS命令。根据这个应用程序的操作系统权限，包括以下可能的情况：
        * 文件操作(读/创建/修改/删除)；
        * 打开一个通向攻击者的服务器的网络连接；
        * 启动和停止系统服务；
        * 完全接管服务器。


起因
这样的情况是如何发生的
    这个应用程序运行OS系统级别命令来完成它的任务，而不是通过应用程序代码来完成它的任务。命令含有不能信任的数据，这些数据可能是被攻击者控制的。这个不能信任的字符串可能包含恶意的、由攻击者密谋策划的系统级别的一些命令，这些命令被执行就像攻击者直接在这个应用程序服务器上运行这些命令一样。


常规建议
如何避免这样的情况
    重构代码以避免任何直接shell命令执行。相反，使用平台提供的API或者库函数调用。
    如果移除命令执行是不可能的话，仅执行那些不包含动态的、用户控制数据的静态命令。
    校验所有输入，无论来源。校验应该基于一个白名单：仅接受符合特定格式的数据，而不是拒绝不合格的模式（黑名单）。参数应该被限制到一个被允许的字符集里，并且没有被校验的输入应该被丢弃。除了字符之外，检查如下内容：
        * 数据类型
        * 数据大小
        * 数据范围
        * 数据格式
        * 期待的一些值
    为了最小化损害，作为一种深度防御措施，配置这个应用程序，让它使用一个受限制的人员账户来运行，这个账户没有任何不必要的OS特权。
    如果可能的话，隔离所有OS命令使它们只用一个单独的、专用的人员账户，该账户只有对指定命令和被这个应用程序使用的文件的最小特权，依照最小特权原则。



更多信息：http://cwe.mitre.org/data/definitions/77.html
