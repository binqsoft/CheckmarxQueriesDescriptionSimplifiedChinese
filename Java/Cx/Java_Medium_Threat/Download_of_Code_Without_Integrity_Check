Download_of_Code_Without_Integrity_Check

漏洞ID：494（弱点基数）状况：草案

描述

概述

    产品从远程位置下载源代码或可执行文件，并在没有充分验证代码的来源和完整性的情况下执行代码。

扩展说明

    攻击者可以通过泄露主机服务器、执行DNS欺骗或修改传输中的代码来执行恶意代码。
引入时间
    *结构设计
    *安装启用

适用平台
    语言
        语言——支持语言无关性（Language-Independent）的脚本 能够通过记录或编码来创建脚本
常见后果
    范围                 影响
    Availability         执行不受信任的代码可能导致应用程序的妥协和用户不能正确工作。
    Confidentiality      
如果攻击者可以影响不受信任的代码，则在执行时，它可以向攻击者提供对敏感文件的访问。
 
    Integrity            执行不受信任的代码可能会影响程序的控制流，也可能会导致对敏感资源的修改。
利用可能性
    
中等
检测方法

手动分析
    手动分析通常需要找到触发代码下载的行为，并确定是否在使用完整性检查方法。

    例证 
        例1
	示例语言：Java
	URL[] classURLs= new URL[]{
	 new URL("file:subdir/")
	};
	URLClassLoader loader = new URLClassLoader(classURLs);
	Class loadedClass = Class.forName("loadMe", true, loader);
实例
    参照                描述
    CVE-2008-3438	操作系统并不验证自己更新的真实性。
    CVE-2008-3324	在线poker客户端不验证自己的更新的真实性。.
    CVE-2001-1125	反病毒产品本身不验证自动更新。
    CVE-2002-0671	从网站下载应用程序没有验证完整性的VOIP电话
	
可做的缓解措施
    阶段：安装启用
        执行正确的前向和反向DNS查找以检测DNS欺骗。这只是部分解决方案，因为它不会阻止您的代码在宿主站点或传输中被修改。


    阶段：架构和设计；操作
	在传输之前用可靠的加密方案加密代码。这只是一个部分解决方案，因为它不会检测DNS欺骗，也不会阻止您的代码在宿主站点上被修改。
    
阶段：架构和设计
	对传输的代码使用完整性检查。
		*如果您要提供要下载的代码（例如软件的自动更新），请对您的代码使用加密签名，并修改下载客户端以验证签名。确保您的实施不包含CWE-295，CWE-320，CWE-347及其相关弱点。
		*使用代码签名技术，如Authenticode。参见参考。

    阶段：测试
	使用需要手动（人工）分析的工具和技术，例如渗透测试，威胁建模和交互式工具，以便测试人员记录和修改活动会话。这些可能比严格的自动化技术更有效。尤其是与设计和业务规则相关的弱点。

    阶段：测试
	*使用监视工具来检查与操作系统和网络交互的软件过程。当源代码不可用，软件不是由您开发，或者如果您想验证构建阶段没有引入任何新的缺陷，这种技术是有用的。示例包括直接附加到正在运行的进程的调试器; 系统调用跟踪实用程序，如truss（Solaris）和strace（Linux）; 系统活动监视器，如FileMon，RegMon，进程监视器和其他Sysinternals实用程序（Windows）; 以及监视网络流量的嗅探器和协议分析器。
	*将监视器连接到进程，并嗅探网络连接。触发与产品更新或插件安装相关的功能，这可能会强制代码下载。监视何时下载并单独执行文件，或者是否将文件读回到过程中。查找使用完整性检查的加密库调用的证据。

关系
性质	   类型	   ID	名称	
ChildOf		   490	移动代码间的问题                	699
ChildOf		   669	环境之间不正确的资源转移		1000
ChildOf		   752	2009年前25名 - 风险资源管理		750
ChildOf		   802	2010年前25名 - 风险资源管理		800
PeerOf		   79	保存网页结构失败（“跨站脚本”）        1000
CanfFollow         79	保存留网页结构失败（“跨站脚本”）	1000

研究差距
    这对移动代码至关重要，但随着开发者继续采用基于网络的自动化产品分发和升级，这种情况可能会变得越来越普遍。软件即服务（SaaS）可能会引入更多的细微之处。常见的开发情况可能包括广告服务器的妥协和糟糕的升级。

分类映射
    映射的分类名称	节点ID	适合	映射的节点名称
    CLASP			        调用不可信的移动代码

相关的攻击模式
	CAPEC-ID	攻击模式名称		 （CAPEC版本：1.5）
	184		软件完整性攻击
	185		恶意软件下载
	186		恶意软件更新
	187		恶意自动软件更新
参考
    微软。“代码签名简介”。< http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx >。
    苹果。“代码签名指南”。苹果开发者连接。2008-11-19。< http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html >。
    Anthony Bellissimo，John Burgess和Kevin Fu。“安全的软件更新：失望和新的挑战”。< http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf >。
    [REF-17]迈克尔·霍华德，戴维·勒布朗克和约翰·维加。“24个软件安全的罪恶”。“罪18：移动代码的罪” McGraw-Hill。2010。

内容历史
提交
    提交日期	提交	组织	资源
                CLASP		外部源
修改
    修改日期	修改	         组织		资源
    2008-07-01	埃里克·达奇	 Cigital的	外部
		更新时间介绍
    2008-09-08	CWE内容团队	 迈特		内部
		更新的关系，其他注释，分类映射
    2009-01-12	CWE内容团队	 迈特	       	内部
		更新的适用平台，常见后果，说明，名称，其他说明，潜在缓解措施，参考文献，关系，研究差距，类型
    2009-03-10	CWE内容团队	 迈特		内部
		更新了潜在的缓解措施
    2009-07-27	CWE内容团队	 迈特		内部
		更新的说明，观察的例子，相关的攻击模式
    2010-02-16	CWE内容团队	 迈特		内部
		更新的检测因子，参考，关系
    2010-04-05	CWE内容团队	 迈特		内部
		更新的适用平台
上一个输入名称
    改变日期	上一个输入名称
    2008-04-11	移动代码：调用不可信的移动代码
    2009-01-12	下载不可信的移动代码没有完整性检查

