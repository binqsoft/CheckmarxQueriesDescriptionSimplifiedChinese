Use_of_a_One_Way_Hash_with_a_Predictable_Salt（使用含有可预测的盐的哈希方法）

风险
可能发生的情况
    如果攻击者访问到了经过哈希处理的密码，她将能够根据这个弱点反哈希并获取到原始密码。一旦密码被发现，攻击者可以模仿用户，充分利用他们的权限，访问他们的个人数据。此外，这很可能不会被发现，因为攻击者仅仅是用受害者的凭证来通过验证的。

起因
这样的情况是如何发生的
    典型的加密哈希方法，例如SHA-1和MD5，都令人难以置信的快速。结合例如预计算彩虹表这样的攻击技术，攻击者很容易反哈希并发现原始密码。在密码中缺少一个独特的、随机的盐将会使暴力攻击法更加简单。

常规建议
如何避免这样的情况
常规指导：
    ＊一直使用强的、流行的算法来进行加密、哈希或其他行为。
    ＊不要使用弱的、过期的或废弃的算法。
    ＊根据具体的需求，确保你选择了正确的算法机制。
特殊建议：
    ＊用密码哈希算法来保护密码，而不是用一般的加密哈希方法。密码哈希算法包括例如bscrypt，scrypt，PBKDF2和Argon2这样的自适应哈希方法。
    ＊根据指定的环境和风险配置，调整自适应哈希方法的工作因子或成本。
    ＊如果一定要使用普通的哈希方法来保护密码，那么在哈希之前添加一些特殊的、随机的数据（即“盐”）到密码中。把这些“盐”和哈希过的密码一起储存，并且对于多个密码不要使用同样的盐。

源代码示例：
Java
有害的 － 不加盐的哈希密码
private String protectPassword(String password) {
    byte[] data = password.getBytes();
    byte[] hash = null; 
  
    MessageDigest md = MessageDigest.getInstance("MD5");
    hash = md.digest(data);
  
    return Base64.getEncoder().encodeToString(hash); 
}

有益的 － 快速加盐哈希方法
private String protectPassword(String password) {
    byte[] data = password.getBytes("UTF-8");
    byte[] hash = null; 
  	  
    try { 
        MessageDigest md = MessageDigest.getInstance("SHA-1");
  	
        SecureRandom rand = new SecureRandom();
      	byte[] salt = new byte[32];
      	rand.nextBytes(salt); 
      
  	    md.update(salt);
      	md.update(data); 
      
      	hash = md.digest();
    }
    catch (GeneralSecurityException gse) {
      	handleCryptoErrors(gse);
    }
    finally {
      	Arrays.fill(data, 0);
    }
  
    return Base64.getEncoder().encodeToString(hash); 
｝

有益的 － 慢速自适应的密码哈希方法
private String protectPassword(String password) {
    byte[] data = password.getBytes("UTF-8");
    byte[] hash = null; 
  
    try { 
        SecureRandom rand = new SecureRandom();
      	byte[] salt = new byte[32];
      	rand.nextBytes(salt); 

      	SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA512");
      	PBEKeySpec spec = new PBEKeySpec(data, salt, ITERATION_COUNT, KEY_LENGTH);
      	// ITERATION_COUNT should be configured by environment, KEY_LENGTH should be 256
      	SecretKey key = skf.generateSecret(spec);
      
      	hash = key.getEncoded(); 
    }
    catch (GeneralSecurityException gse) {
      	handleCryptoErrors(gse);
    }
    finally {
      	Arrays.fill(data, 0);
    }
  
    return Base64.getEncoder().encodeToString(hash); 
}

更多信息：http://cwe.mitre.org/data/definitions/759.html

