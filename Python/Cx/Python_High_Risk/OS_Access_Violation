OS_Access_Violation(OS非法访问) 

风险
可能发生的情况
    攻击者能够准备恶意的输入数据，该数据将引发一次非法访问、一次私有数据泄漏、数据污染、或者一次拒绝服务(denial of service)(DEP违规和应用程序崩溃)

起因
这样的情况是如何发生的
    Python的OS模块提供了一个可移植的接口，旨在使用宿主机操作系统的功能。

    这个OS模块的接口包括了创建、删除和操控宿主机文件、文件夹和（硬、软）链接的操作。

    Python的OS模块允许任意文件访问和操控。假使攻击者能够传递一个特殊制作的输入路径给OS模块，非法访问或者数据污染就可能发生。

常规建议
如何避免这样的情况
    信任边界 － 对于接收到的来自不能信任的或者用户控制的源不要使用OS模块来操控宿主机文件。正常情况下这个应用程序应该可以信任来自自身服务器的数据（数据库、缓存，等等）。
    安全通信 － 如果一个应用程序接收来自在一个可信任的环境里的一个可信任应用程序的一个属性名称，确保使用的是加密网络连接。

    如何避免它：
    这个常规建议是指要在将用户输入传递给OS模块前正确地校验用户输入。
    1）确保被操纵的文件的文件路径被正确校验：
        a. 如果可能的话，避免基于用户输入的文件路径
        b. 确保文件路径是完全规范化的
        c. 在一个特定文件夹（沙箱）内限制对文件路径的访问
    2）创建一个文件或文件夹的白名单，这个白名单可以被安全地操纵并允许访问仅仅这些文件或文件夹。

源代码示例
Python
有害的 － 这个应用程序接收到一个文件路径并移除这个文件

import os
import sys

path = sys.stdin.readline()[:-1]
os.remove(path)

有益的 － 这个应用程序执行限制访问，只能访问到一个特定文件夹内的文件

import os
import sys

def is_safe_path(basedir, path):
    return os.path.abspath(path).startswith(basedir)

path = sys.stdin.readline()[:-1]

if not is_safe_path('/tmp/userfiles', path):
    sys.stdout.write('Not allowed!\n')
    sys.exit()
    
os.remove(path)


更多信息：http://cwe.mitre.org/data/definitions/77.html
